basePath: /api/v1
definitions:
  models.Task:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        enum:
        - pending
        - in_progress
        - completed
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - status
    - title
    type: object
  models.TaskResponse:
    properties:
      created_at:
        type: string
      description:
        example: Write comprehensive documentation for the Taskify project
        type: string
      id:
        example: 5f7b5e1b9b0b3a1b3c9b4b1a
        type: string
      status:
        example: pending
        type: string
      title:
        example: Complete project documentation
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: A task management RESTful API implementation with MongoDB
  title: Taskify API
  version: "1.0"
paths:
  /tasks:
    get:
      consumes:
      - application/json
      description: Get a list of all tasks with optional filtering, pagination, and
        sorting
      parameters:
      - description: Filter by status (pending/in_progress/completed)
        in: query
        name: status
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (created_at/-created_at)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TaskResponse'
            type: array
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the provided information
      parameters:
      - description: Task object
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TaskResponse'
      summary: Create a new task
      tags:
      - tasks
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Get details of a specific task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskResponse'
      summary: Get a task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update a task's information
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task object
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskResponse'
      summary: Update a task
      tags:
      - tasks
swagger: "2.0"
